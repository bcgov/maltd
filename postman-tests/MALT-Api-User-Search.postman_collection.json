{
  "info": {
    "_postman_id": "4b51c803-8b9e-456c-9a2d-2dd2f3852463",
    "name": "MALT-Api-User-Search",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "MALT-user-search",
      "item": [
        {
          "name": "maltUserSearch",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "496c6de5-18ad-451d-80fb-b2481c83eee9",
                "exec": [
                  "pm.test(\"Content-Type is present\", () => {",
                  "   pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  " const respJson = pm.response.json();",
                  "",
                  "// Valid request ** Update the data file with the valid user name when running this tests locally or dev to prevent failures **",
                  "pm.test(\"Assert the response has correct objects for a valid request\", () => {",
                  "    ",
                  "    if(pm.iterationData.get(\"isValid\") === \"true\") {",
                  "        pm.test(\"Status code is 200\",  () => {",
                  "            pm.response.to.have.status(200);",
                  "});",
                  "",
                  "        pm.expect(respJson.id).to.not.to.be.null;",
                  "        pm.expect(respJson.username).to.be.a('string').and.not.to.be.null;",
                  "        pm.expect(respJson.firstName).to.be.a('string').and.not.to.be.null;",
                  "        pm.expect(respJson.lastName).to.be.a('string').and.not.to.be.null;",
                  "        pm.expect(respJson.email).to.include('@gov.bc.ca');",
                  "    }",
                  "});",
                  "",
                  "const isValid = pm.iterationData.get(\"isValid\");",
                  "",
                  "// Not found",
                  "pm.test(\"Assert the response for request with incorrect IDIR\", () => {",
                  "    ",
                  "    if((isValid === \"incorrect\") || (isValid === \"invalid\") || (isValid === \"incorrectData\") || (isValid === \"email\") || (isValid === \"name\")) {",
                  "        pm.test(\"Status code is 404\",  () => {",
                  "            pm.response.to.have.status(404);",
                  "});",
                  "",
                  "        pm.expect(respJson.type).to.be.a('string').and.not.to.be.null;",
                  "        pm.expect(respJson.title).to.eql('Not Found');",
                  "        pm.expect(respJson.status).to.eql(404);",
                  "        pm.expect(respJson.traceId).to.include('|').and.not.to.be.null;",
                  "    }",
                  "});",
                  "",
                  "//  Bad request",
                  "pm.test(\"Assert the response for request with invalid IDIR\", () => {",
                  "    ",
                  "    if((isValid === \"noData\") || (isValid === \"empty\")) {",
                  "        pm.test(\"Status code is 400\",  () => {",
                  "            pm.response.to.have.status(400);",
                  "});",
                  "",
                  "        pm.expect(respJson.type).to.be.a('string').and.not.to.be.null;",
                  "        pm.expect(respJson.title).to.eql('Bad Request');",
                  "        pm.expect(respJson.status).to.eql(400);",
                  "        pm.expect(respJson.traceId).to.include('|').and.not.to.be.null;",
                  "    }",
                  "});",
                  "",
                  "//  Incorrect Parameter property",
                  "pm.test(\"Assert the response for request with incorrect param property\", () => {",
                  "    ",
                  "    if((isValid === \"incorrectParam\")) {",
                  "        pm.test(\"Status code is 400\",  () => {",
                  "            pm.response.to.have.status(400);",
                  "});",
                  "",
                  "        pm.expect(respJson.type).to.be.a('string').and.not.to.be.null;",
                  "        pm.expect(respJson.title).to.eql('One or more validation errors occurred.');",
                  "        pm.expect(respJson.status).to.eql(400);",
                  "        pm.expect(respJson.traceId).to.include('|').and.not.to.be.null;",
                  "        pm.expect(respJson.errors.q[0]).to.eql(\"A value for the 'q' parameter or property was not provided.\");",
                  "    }",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9c1608e2-a880-48bb-9c9e-d7c6d06825be",
                "exec": ["", "", ""],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users?{{param}}={{q}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"],
              "query": [
                {
                  "key": "{{param}}",
                  "value": "{{q}}"
                },
                {
                  "key": "",
                  "value": "",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    }
  ],
  "protocolProfileBehavior": {}
}
